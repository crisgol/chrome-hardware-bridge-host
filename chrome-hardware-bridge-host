#!/usr/bin/env python
# Copyright (c) 2016 Tiger-Workshop Limited. All rights reserved.

import struct
import sys
import threading
import Queue
import json
import urllib
import tempfile
import uuid
import wx

try:
    import pdfkit
except ImportError:
    pdfkit = None

# Debug Switch
Debug = False

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
    import os, msvcrt
    import win32api
    import win32com.client
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

# Helper function that sends a message to the webapp.
def send_message(message):
    # Write message size.
    os.write(1,struct.pack('I', len(message)))
    # Write the message itself.
    os.write(1,message)

# Thread that reads messages from the webapp.
def read_thread_func(queue):
    while 1:
    # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.read(4)

        if len(text_length_bytes) == 0:
            if queue:
                queue.put(None)
            sys.exit(0)

        try:
            # Unpack message length as 4 byte integer.
            text_length = struct.unpack('i', text_length_bytes)[0]

            # Read the text (JSON object) of the message.
            text = sys.stdin.read(text_length).decode('utf-8')
        except:
            text = ''
            print('Decode error: %s' % text)

        if queue:
            queue.put(text)
        else:
            # Procsss Input
            handler = MessageHandler(None)
            handler.handle(text)

class MessageHandler():
    def __init__(self, logger):
        self.logger = logger

    def log(self, message):
        if self.logger:
            self.logger.log(message)

    def response(self, message):
        self.log(">> %s" % message)
        send_message(message)

    def handle(self, message):

        self.log("<< %s" % message)
        data = json.loads(message)

        try:
            if not 'action' in data:
                raise ValueError('action required')

            if data['action'] == 'print':
                pdf_path = tempfile.gettempdir() + "/" + str(uuid.uuid4()) + ".pdf"

                if 'printer' in data and data['printer'] != False:
                    printer = data['printer']
                else:
                    printer = ''

                if 'url' in data:
                    self.log("Print from URL: %s" % data['url'])
                    urllib.urlretrieve(data['url'], pdf_path)
                    self.log("PDF Retrieved")
                elif 'html' in data:
                    self.log("Print from HTML: %s" % data['html'])
                    pdfkit.from_string(data['html'], pdf_path)
                    self.log("PDF Generated")
                else:
                    raise ValueError('url or html required')

                win32api.ShellExecute(0, "printto", pdf_path, printer, ".", 0)

                # OK Response
                self.response(json.dumps({'status': 0}))
            elif data['action'] == 'list_printer':                
                strComputer = "."
                objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
                objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
                colItems = objSWbemServices.ExecQuery("Select * from Win32_PrinterConfiguration")

                printers = []

                for objItem in colItems:
                    printers.append(objItem.Name)

                self.response(json.dumps({'status': 0, 'action': 'list', 'type': 'printer', 'items': printers}))
            else:
                raise ValueError('Unknown action')


        except Exception as e:
            # Error Response
            self.response(json.dumps({'status': 1, 'message': str(e)}))

class NativeMessagingWindow(wx.Frame):
    def __init__(self, parent, title, queue):
        self.queue = queue
        self.parent = parent
        
        wx.Frame.__init__(self, parent, title=title, size=(640,480))
        
        self.text = wx.TextCtrl(self, -1,
                                style=wx.TE_MULTILINE|wx.BORDER_SUNKEN|wx.TE_READONLY|
                                wx.TE_RICH2, size=(640,480))
                                
         
        if Debug == True:
            self.Show(True)

        wx.CallLater(100, self.processMessages)

    def processMessages(self):
        while not self.queue.empty():

            message = self.queue.get_nowait()
            if message == None:
                self.quit()
                return

            # Procsss Input
            handler = MessageHandler(self)
            handler.handle(message)

        wx.CallLater(100, self.processMessages)
    

    def onSend(self):
        text = '{"status": "' + self.messageContent.get() + '"}'
        self.log('>> %s' % text)
        try:
            send_message(text)
        except IOError:
            self.log('Error sending message')

    def log(self, message):
        print message
        self.text.AppendText(message + "\n")

# Start the App
app = wx.App(False)
queue = Queue.Queue()

main_window = NativeMessagingWindow(None, 'Chrome Hardware Extension', queue)

thread = threading.Thread(target=read_thread_func, args=(queue,))
thread.daemon = True
thread.start()

msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

app.MainLoop()
