#!/usr/bin/env python
# Copyright (c) 2016 Tiger-Workshop Limited. All rights reserved.

import struct
import sys
import os
import threading
import Queue
import json
import urllib
import tempfile
import uuid
import win32api
import win32com.client
import wx
import wx.adv

try:
    import pdfkit
except ImportError:
    pdfkit = None

    
# Version String
VERSION = "1.1.0"
# Debug Switch
DEBUG = False

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
    import msvcrt
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

# Helper function that sends a message to the webapp.
def send_message(message):
    # Write message size.
    os.write(1,struct.pack('I', len(message)))
    # Write the message itself.
    os.write(1,message)

# Thread that reads messages from the webapp.
def read_thread_func(queue):
    while 1:
    # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.read(4)

        if len(text_length_bytes) == 0:
            if queue:
                queue.put(None)
            sys.exit(0)

        try:
            # Unpack message length as 4 byte integer.
            text_length = struct.unpack('i', text_length_bytes)[0]

            # Read the text (JSON object) of the message.
            text = sys.stdin.read(text_length).decode('utf-8')
        except:
            text = ''
            print('Decode error: %s' % text)

        if queue:
            queue.put(text)
        else:
            # Procsss Input
            handler = MessageHandler(None)
            handler.handle(text)

class MessageHandler():
    def __init__(self, window):
        self.window = window

    def log(self, message):
        if self.window:
            self.window.log(message)

    def response(self, message):
        self.log(">> %s" % message)
        send_message(message)
        
    def show(self, message):
        if self.window:
            self.window.showMessage(message)

    def handle(self, message):

        self.log("<< %s" % message)
        data = json.loads(message)

        try:
            if not 'action' in data:
                raise ValueError('action required')

            if data['action'] == 'print':
                pdf_path = tempfile.gettempdir() + "/" + str(uuid.uuid4()) + ".pdf"

                if 'printer' in data and data['printer'] != False:
                    printer = data['printer']
                else:
                    printer = ''

                if 'url' in data:
                    self.show("Print from URL: %s" % data['url'])
                    urllib.urlretrieve(data['url'], pdf_path)
                    #self.show("PDF Retrieved")
                elif 'html' in data:
                    self.show("Print from HTML: %s" % data['html'])
                    pdfkit.from_string(data['html'], pdf_path)
                    #self.show("PDF Generated")
                else:
                    raise ValueError('url or html required')

                win32api.ShellExecute(0, "printto", pdf_path, printer, ".", 0)

                # OK Response
                self.response(json.dumps({'status': 0}))
                
                sys.exit(0)
            elif data['action'] == 'list_printer':            
                strComputer = "."
                objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
                objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
                colItems = objSWbemServices.ExecQuery("Select * from Win32_PrinterConfiguration")

                printers = []

                for objItem in colItems:
                    printers.append(objItem.Name)

                self.response(json.dumps({'status': 0, 'action': 'list_printer', 'items': printers}))
            elif data['action'] == 'version':
                self.response(json.dumps({'status': 0, 'action': 'version', 'value': VERSION}))
            elif data['action'] == 'bye':
                sys.exit(0)
            else:
                raise ValueError('Unknown action: %s' % data['action'])


        except Exception as e:
            # Error Response
            self.response(json.dumps({'status': 1, 'message': str(e)}))

class NativeMessagingWindow(wx.Frame):
    def __init__(self, parent, title, queue):
        self.queue = queue
        self.parent = parent
        
        wx.Frame.__init__(self, parent, title=title, size=(640,480))
        self.Bind(wx.EVT_CLOSE, self.onClose)        
        
        self.text = wx.TextCtrl(self, -1,
                                style=wx.TE_MULTILINE|wx.BORDER_SUNKEN|wx.TE_READONLY|
                                wx.TE_RICH2, size=(640,480))
                                
        if DEBUG == True:
            self.Show(True)

        wx.CallLater(100, self.processMessages)
    
    def onIconClick(self, event):
        self.Show(True)
    
    def onClose(self, event):
        if self.icon:
            self.icon.Destroy()
        self.Destroy()        
    
    def setIcon(self, icon):
        self.icon = icon
        self.icon.Bind(wx.adv.EVT_TASKBAR_LEFT_UP, self.onIconClick)
        self.icon.Bind(wx.adv.EVT_TASKBAR_RIGHT_UP, self.onIconClick)
    
    def showMessage(self, message):
        if self.icon:
            self.icon.ShowBalloon("Chrome Hardware Bridge", message, 1000)
    
    def processMessages(self):
        while not self.queue.empty():

            message = self.queue.get_nowait()
            if message == None:
                self.quit()
                return

            # Procsss Input
            handler = MessageHandler(self)
            handler.handle(message)

        wx.CallLater(100, self.processMessages)

    def log(self, message):
        self.text.AppendText(message + "\n")


# Start the App
app = wx.App(False)
queue = Queue.Queue()

# main window
main_window = NativeMessagingWindow(None, 'Chrome Hardware Extension', queue)

# message queue
thread = threading.Thread(target=read_thread_func, args=(queue,))
thread.daemon = True
thread.start()

# icon object
icon = wx.Icon(os.path.dirname(os.path.realpath(__file__)) + "/icon-128.png", wx.BITMAP_TYPE_PNG)

# taskbar icon
taskbaricon = wx.adv.TaskBarIcon()
taskbaricon.SetIcon(icon, "Chrome Hardware Extension")

main_window.setIcon(taskbaricon)

app.MainLoop()
